<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.nhnacademy</groupId>
  <artifactId>mvn-practice</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>mvn-practice</name>
  <!-- FIXME change it to the project's website -->
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!--컴파일과 타겟(컴파일한 결과물)에 자바 버전 설정-->
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <!--dependencyManagement는 dependency에 명시 안해줘도 자동으로 적용해줌-->
  <!--<dependencyManagement>-->
    <!--프로젝트 내에서 사용할 수 있는 외부 라이브러리 추가 설정-->
    <dependencies>
      <!--실습1 : apache common math 라이브러리 추가-->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-math3</artifactId>
        <version>3.6.1</version>
        <!--<scope> 태그가 없으면 컴파일, 테스트 모두 적용된다는 뜻-->
      </dependency>

      <!--실습2 : apache common lang 라이브러리 추가-->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.17.0</version>
      </dependency>

      <!--실습3 : apache common csv 라이브러리 추가-->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-csv</artifactId>
        <version>1.13.0</version>
      </dependency>


      <!--JUnit 라이브러리-->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8.1</version>
        <!--<scope> 태그로 test가 있으면 실제 jar로 패키징할 때 해당 라이브러리는 제외된다.
            왜냐하면 jar로 실행한다는 것은 실제로 구동하는 것이므로 test코드에 필요한 라이브러리는 필요가 없다.-->
        <!--ps) provide는 compile,test 모두 적용은 되나 jar로 압축할 때는 제외됨-->
        <scope>test</scope>
      </dependency>

      <!--JUnit 테스트를 실행하고 테스트 엔진과 통신하기 위한 인프라를 제공
          테스트 실행, 확장, 리포팅 등의 기능을 담당한다.-->
<!--      <dependency>-->
<!--        <groupId>org.junit.platform</groupId>-->
<!--        <artifactId>junit-platform-launcher</artifactId>-->
<!--        <scope>test</scope>-->
<!--      </dependency>-->

      <!--JUnit5에서 도입된 새로운 테스트 프레임워크로
          Jupiter는 JUnit5의 주요 기능으로서 다양한 테스트 유형을 지원하고, 확장할 수 있는 테스트 API를 제공한다.-->
<!--      <dependency>-->
<!--        <groupId>org.junit.jupiter</groupId>-->
<!--        <artifactId>junit-jupiter-engine</artifactId>-->
<!--        <scope>test</scope>-->
<!--      </dependency>-->

      <!--레거시 프로젝트 전용 지원 junit-->
<!--      <dependency>-->
<!--        <groupId>org.junit.vintage</groupId>-->
<!--        <artifactId>junit-vintage-engine</artifactId>-->
<!--        <scope>test</scope>-->
<!--      </dependency>-->
    </dependencies>
<!--</dependencyManagement>-->


  <build>
    <!--jar로 패키징할 때 파일명 지정하는법-->
    <finalName>app</finalName>

    <plugins>
      <!--실행 가능한 jar로 설정하는 2가지 방식-->
      <!--방식1 : 라이브러리를 특정 디렉터리(ex target/lib)로 복사하여 참조하는 방식-->
      <!--장점 : 외부 라이브러리 파일들이 들어 있지 않아서 파일이 가벼움-->
      <!--단점 : 실행하는 곳에서 해당 외부 라이브러리 파일들을 가지고 있어야 함-->
<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-dependency-plugin</artifactId>-->

<!--        <executions>-->
<!--          <execution>-->
<!--            <id>copy-dependencies</id>-->

<!--            <phase>prepare-package</phase>-->
<!--            -->
<!--            <goals>-->
<!--              <goal>copy-dependencies</goal>-->
<!--            </goals>-->

<!--            <configuration>-->
<!--              &lt;!&ndash;필요한 모든 dependency를 `${project.build.directory}/libs`에 복사&ndash;&gt;-->
<!--              <outputDirectory>-->
<!--                ${project.build.directory}/libs-->
<!--              </outputDirectory>-->
<!--            </configuration>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->

<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-jar-plugin</artifactId>-->
<!--        <configuration>-->
<!--          <archive>-->
<!--            &lt;!&ndash;복사한 dependency들을 경로를 인식할 수 있도록 MANIFEST.MF파일에 설정한다. &ndash;&gt;-->
<!--            <manifest>-->
<!--              <addClasspath>true</addClasspath>-->

<!--              &lt;!&ndash;libs폴더의 하위 라이브러리들 참조 설정-->
<!--                  이러한 과정들 덕분에 수동으로 수많은 외부 라이브러리의 classpath를 일일히 지정할 필요가 없어진 것&ndash;&gt;-->
<!--              <classpathPrefix>libs/</classpathPrefix>-->

<!--              &lt;!&ndash;실행되는 main() 클래스 설정&ndash;&gt;-->
<!--              <mainClass>-->
<!--                com.nhnacademy.app.movie.MovieMain-->
<!--              </mainClass>-->
<!--            </manifest>-->
<!--          </archive>-->
<!--        </configuration>-->
<!--      </plugin>-->

      <!--방식2 : jar에 외부 라이브러리 파일을 모두 넣는 방식-->
      <!--장점 : 외부 라이브러리 파일들이 들어있어 실행하는 곳에서 해당 파일들을 가지고 있지 않아도 실행가능-->
      <!--단점 : 외부 라이브러리 파일들도 다 포함되어 있어 jar 파일 용량이 크다-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>

          <executions>
            <execution>
              <goals>
                <goal>shade</goal>
              </goals>

              <configuration>
                <shadedArtifactAttached>true</shadedArtifactAttached>

                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <mainClass>com.nhnacademy.app.movie.MovieMain</mainClass>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>
    </plugins>
  </build>
</project>
